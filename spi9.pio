.program spi9
.side_set 1
start:
    set     pins, 4         side 0  ; put CS high
    pull                    side 0  ; get command/data signal
    mov     x, osr          side 0  ; let x decide if this is a command or data
    pull                    side 0  ; get number of bytes to send
    mov     y, osr          side 0  ; let y contain the number of values to shift
    set     pins, 0         side 0  ; put CS low

    jmp     y-- repeat      side 0  ; start over when y is zero
    jmp     start           side 0

repeat:
    pull                    side 0  ; get data to send

    mov     osr, :: osr     side 0
    out     null, 24        side 0
    mov     osr, osr        side 0

    jmp     !x command      side 0

data:
    set     pins, 1         side 0  ; 9th bit is 1 for data
    jmp     bitloop         side 1

command:
    set     pins, 0         side 0  ; 9th bit is 0 for command
    jmp     bitloop         side 1

bitloop:
    out     pins, 1         side 0
    jmp     !osre bitloop   side 1

    jmp     y-- repeat      side 0  ; start over when y is zero
    jmp     start           side 0

% c-sdk {
static inline void spi9_program_init(PIO pio, uint stateMachine, uint locationOffset, 
            float clkdiv, uint pin_sck, uint pin_mosi) 
{
    pio_sm_config config = spi9_program_get_default_config(locationOffset);

    // IO Mapping
    sm_config_set_set_pins(&config, pin_mosi, 3);   // Ability to manually set MOSI pin for 9th bit and CS
    sm_config_set_out_pins(&config, pin_mosi, 1);   // Shift data out to MOSI pin
    sm_config_set_sideset_pins(&config, pin_sck);   // Side-set the SCK pin

    const bool shift_right = true;
    const bool autopull = false;
    const uint pull_threshold = 8;
    sm_config_set_out_shift(&config, shift_right, autopull, pull_threshold);

    // clkdiv is 125MHz / x => speed, so 31.25f => 4MHz clock => ~1MHz SPI speed
    sm_config_set_clkdiv(&config, clkdiv);
    // join the FIFO to be 8 deep
    sm_config_set_fifo_join(&config, PIO_FIFO_JOIN_TX);

    // Set MOSI and SCK low. CS High
    const uint32_t pin_set_values = 1u << (pin_mosi+2);
    const uint32_t pin_set_mask = (1u << pin_sck) | (1u << pin_mosi) | (1u << (pin_mosi+2));
    //pio_sm_set_pins_with_mask(pio, stateMachine, pin_set_values, pin_set_mask);

    // Set MOSI, CS and SCK as out pins
    const uint32_t pin_dir_value = (1u << pin_sck) | (1u << pin_mosi) | (1u << (pin_mosi+2));
    const uint32_t pin_dir_mask = (1u << pin_sck) | (1u << pin_mosi) | (1u << (pin_mosi+2));
    pio_sm_set_pindirs_with_mask(pio, stateMachine, pin_dir_value, pin_dir_mask);

    // Assign MOSI and SCK to POI
    pio_gpio_init(pio, pin_mosi);
    pio_gpio_init(pio, pin_mosi+2);
    pio_gpio_init(pio, pin_sck);

    // Ability to invert the output. We keep it as normal
    //gpio_set_outover(pin_sck, GPIO_OVERRIDE_NORMAL);

    pio_sm_init(pio, stateMachine, locationOffset, &config);
    // Clear x and y. Maybe not needed
    pio_sm_exec(pio, stateMachine, pio_encode_set(pio_x, 0));
    pio_sm_exec(pio, stateMachine, pio_encode_set(pio_y, 0));
    pio_sm_set_enabled(pio, stateMachine, true);
}
%}

